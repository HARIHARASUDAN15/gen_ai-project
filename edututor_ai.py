# -*- coding: utf-8 -*-
"""EduTutor_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kLzP9u4nT-QyHBTKCXm3FnnAXiQ87ebP
"""

!pip install gradio torch transformers

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import tempfile

# ----------------- Model Setup -----------------
model_name = "ibm-granite/granite-3.2-2b-instruct"

# Load tokenizer and model
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else "cpu"
)

# Ensure pad token is set
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ----------------- Response Generator -----------------
def generate_response(prompt, max_length=1024):
    print(f"[DEBUG] Generating for prompt: {prompt}")  # Debug message

    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=False,
            pad_token_id=tokenizer.eos_token_id
        )
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        response = response[len(prompt):].strip()
        return response if response else "âš  No response generated."

# ----------------- Features -----------------
def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} in a detailed manner with examples, use cases, advantages, and limitations."
    return generate_response(prompt, max_length=700)

def quiz_generator(concept):
    prompt = f"Generate 15 quiz questions about {concept} with different types (MCQ, True/False, Short answer). Provide correct answers at the end."
    return generate_response(prompt, max_length=1500)

def text_summarizer(text):
    prompt = f"Summarize the following text into 20 clear bullet points:\n\n{text}"
    return generate_response(prompt, max_length=1500)

def flashcards_generator(topic):
    prompt = f"Generate 15 flashcards (Question & Answer) for quick revision about {topic}."
    return generate_response(prompt, max_length=1200)

# Save flashcards or quiz/explanation to file
def save_to_file(content):
    path = tempfile.NamedTemporaryFile(delete=False, suffix=".txt").name
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    return path

# ----------------- Gradio Interface -----------------
with gr.Blocks() as app:
    gr.Markdown("# ðŸ“˜ Educational AI Assistant")

    with gr.Tabs():
        # Concept Explanation Tab
        with gr.TabItem("Concept Explanation"):
            concept_input = gr.Textbox(label="Enter a concept:", placeholder="e.g., Machine Learning")
            explain_btn = gr.Button("Explain")
            explanation_output = gr.Textbox(label="Detailed Explanation", lines=20)
            explanation_download = gr.File(label="Download Explanation")

            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)
            explanation_output.change(save_to_file, inputs=explanation_output, outputs=explanation_download)

        # Quiz Generator Tab
        with gr.TabItem("Quiz Generator"):
            quiz_input = gr.Textbox(label="Enter a topic:", placeholder="e.g., Machine Learning")
            quiz_btn = gr.Button("Generate Quiz (15 Qs)")
            quiz_output = gr.Textbox(label="Quiz Questions", lines=40)
            quiz_download = gr.File(label="Download Quiz")

            quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)
            quiz_output.change(save_to_file, inputs=quiz_output, outputs=quiz_download)

        # Text Summarizer Tab
        with gr.TabItem("Summary Generator"):
            text_input = gr.Textbox(label="Paste text to summarize:", lines=10, placeholder="Paste any study notes or article here...")
            summary_btn = gr.Button("Summarize (20 Points)")
            summary_output = gr.Textbox(label="Summary", lines=35)
            summary_download = gr.File(label="Download Summary")

            summary_btn.click(text_summarizer, inputs=text_input, outputs=summary_output)
            summary_output.change(save_to_file, inputs=summary_output, outputs=summary_download)

        # Flashcards Generator Tab
        with gr.TabItem("Flashcards Generator"):
            flashcard_input = gr.Textbox(label="Enter a topic:", placeholder="e.g., Computer Networks")
            flashcard_btn = gr.Button("Generate Flashcards (15)")
            flashcard_output = gr.Textbox(label="Flashcards", lines=35)  # Bigger box
            flashcard_download = gr.File(label="Download Flashcards")

            flashcard_btn.click(flashcards_generator, inputs=flashcard_input, outputs=flashcard_output)
            flashcard_output.change(save_to_file, inputs=flashcard_output, outputs=flashcard_download)

# Launch app
app.launch(share=True)